package thread.performance;

public class MutltiThreadPerformance {

    // 성능은 시나리와 상황애 따라 다르게 정의될 수 있음
    // 지연 시간은 시간 단위로 측정이 됨, 작업 하나의 완료 시간으로 정의가 됨
    // 처리량은 일정 시간 동안 완료한 작업의 양
    // 스레드 개수와 코어 개수가 같다는 공식은 모든 스레드가 인터럽트 없이 하위 작업을
    // 실행해야 최적임, 다시 말해 모든 스레드가 항상 Runnable 상태여야 함, IO 나 Blocking 호출도 없어야 함

    // 마지막으로 요즘 컴퓨터들은 거의 하이퍼 스레딩을 사용
    // Virtual Thread 를 사용

    // 스레드 개수와 코어 개수가 같다는 공식은 모든 스레드가 인터럽트 없이 하위 작업을 실행하여야 함
    // 모든 스레드가 Runnable 상태여야하는데 현실에서는 굉장히 힘듦, 시스템에서 CPU 를 많이 소모하는 건 실행 되고
    // 있지 않아야 함
    // 요즘 커퓨터들은 거의 하이퍼 스레딩을 사용 코어 하나가 스레드 두개를 동시에 실행이 가능
    // 물리적인 코어의 하드웨어 유닛 일부를 복제하여 두 스레드가 병행으로 실행 되고 하드웨어 일부가 공유 됨
    // 모든 스레드를 100% 병렬로 실행할 수 는 없음

    // 하나의 작업을 여러 작업으로 나누고 종합적인 비용, 작업을 여러개로 나누었다면 비용은 감수하여야 함
    // 작고 사소한 작업이면 굳이 분할하고 병행으로 실행 할 가치가 없음, 비용이 비쌈
    
    public static void main(String[] args) {
        // 멀티 스레딩에서 지연 시간 줄이는 법

    }

}
