package com.book.cleancode.chapter_9;

public class Stock_Example {

}

// Concrete 클래스와 Abstract 클래스가 있다.
// 상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다.
// 그래서 우리는 인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리시킨다.
// 상세한 구현에 의존하는 코드는 테스트가 어렵다.

// 테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성이 더욱 높아진다.
// 결합도가 낮다는 소리는 각 시스템 요소가 다른 요소로부터 그리고 변경으로부터 잘 격리되어있다는 의미이다.
// 시스템 요소가 잘 격리되어 있으면 각 요소를 이해하기도 더 쉬워진다.

